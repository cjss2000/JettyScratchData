/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */

package jettyService;

import jettyServlets.DataService;
import jettyServlets.TestServlet;
import jettyServlets.UKRMapServlet;
import jettyServlets.legacyUkrData;
import org.eclipse.jetty.server.Connector;
import org.eclipse.jetty.server.Handler;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.ServerConnector;
import org.eclipse.jetty.server.handler.ContextHandler;
import org.eclipse.jetty.server.handler.ContextHandlerCollection;
import org.eclipse.jetty.server.handler.HandlerCollection;
import org.eclipse.jetty.webapp.WebAppContext;
import java.lang.System.Logger;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.websocket.DeploymentException;

import org.eclipse.jetty.servlet.ServletContextHandler;


/**
 *
 * @author DoD_Admin
 */
public class JettyService {

    // private final static Logger LOGGER = Logger
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws ServletException, DeploymentException {
        // TODO code application logic here

        Server server;
        server = new Server();
        ServerConnector connector = new ServerConnector(server);
        connector.setPort(8082);
        server.setConnectors(new Connector[]{connector});
        Logger logger;

        Trackupdate trackupdate = new Trackupdate();
        trackupdate.start();
        Global.startUnitMover();


        //create instance of context - WebAppContext()


        WebAppContext wc = new WebAppContext();
        wc.setContextPath("/map");
        wc.setWar("C:\\temp\\jetty-base\\webapps");


//        ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);


//        try {
//            WebSocketServerContainerInitializer.configureContext(context);
//        } catch (Throwable t) {
//            t.printStackTrace();
//        }


//   ServerContainer serverContainer = (ServerContainer) WebSocketServerContainerInitializer.configureContext(wc).getServletContext().getAttribute(ServerContainer.class.getName());
//        serverContainer.addEndpoint(WebSocketHandler.class);

        ServletContextHandler testContext = new ServletContextHandler(ServletContextHandler.SESSIONS);
      testContext.setContextPath("/testservlet");
        testContext.addServlet(TestServlet.class, "/*");

        ServletContextHandler dataFeed = new ServletContextHandler(ServletContextHandler.SESSIONS);
        dataFeed.setContextPath("/datafeed");
        dataFeed.addServlet(DataService.class, "/*");

        ServletContextHandler UkraineData = new ServletContextHandler(ServletContextHandler.SESSIONS);
        UkraineData.setContextPath("/Ukraine");
        UkraineData.addServlet(UKRMapServlet.class, "/*");

        ServletContextHandler legacyUkrData = new ServletContextHandler(ServletContextHandler.SESSIONS);
        legacyUkrData.setContextPath("/legacydata");
        legacyUkrData.addServlet(jettyServlets.legacyUkrData.class, "/*");

        ServletContextHandler airTracks = new ServletContextHandler(ServletContextHandler.SESSIONS);
        airTracks.setContextPath("/airData");
        airTracks.addServlet(jettyServlets.legacyUkrData.class, "/*");


        //Create instance of Context Handler Collection

        ContextHandler contextData = new ContextHandler();
        ContextHandlerCollection contexts = new ContextHandlerCollection();
        contexts.addHandler(wc);
        contexts.addHandler(testContext);
        contexts.addHandler(dataFeed);
        contexts.addHandler(UkraineData);
        contexts.addHandler(legacyUkrData);
        contexts.addHandler(airTracks);
//        contexts.addHandler(context);
//        WebSocketServerContainerInitializer.configureContext(context).addEndpoint(WebSocketHandler.class);
        //context handers are set to server handlers
        HandlerCollection handlers = new HandlerCollection();
       handlers.setHandlers(new Handler[]{contexts});
        server.setHandler(handlers);

//         WebAppContext wac = new WebAppContext();
          //wac.setLogEnabled(true);
        try {
            // Start Jetty Web Server
            server.start();
            server.join();

        } catch (Exception ex) {
            System.out.println("TinyServer error with exception\n" + ex);

        }

    }

//        @Override
//        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//            resp.setContentType("text/plain");
//            resp.getWriter().println("UnitMoverServlet is running...");
//        }
    }


